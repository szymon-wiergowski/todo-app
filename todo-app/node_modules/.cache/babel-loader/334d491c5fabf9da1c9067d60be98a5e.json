{"ast":null,"code":"import _slicedToArray from\"/home/szymon/Desktop/ToDo-App/todo-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import{Button,Form,Message,Icon,Input}from\"semantic-ui-react\";import{BASE_URL}from\"./ToDo\";var AddTask=function AddTask(props){var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),task=_useState2[0],setTask=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),dateOfCreateTask=_useState4[0],setDateOfCreateTask=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),taskError=_useState6[0],setTaskError=_useState6[1];var _useState7=useState(false),_useState8=_slicedToArray(_useState7,2),setFormError=_useState8[1];var handleOnChange=function handleOnChange(event){setTask(event.target.value);setDateOfCreateTask(Date.now());};var handleOnClick=function handleOnClick(event){event.preventDefault();var error=false;var taskLength=task.length;if(taskLength<5||taskLength>35){setTaskError(true);error=true;}else{setTaskError(false);}if(error){setFormError(true);return;}setFormError(false);var formattedFormData={task:task,done:false,dateOfCreateTask:dateOfCreateTask};fetch(\"\".concat(BASE_URL,\"/todo.json\"),{method:\"POST\",body:JSON.stringify(formattedFormData)}).then(function(){props.onAdd();setTask(\"\");setDateOfCreateTask(\"\");}).catch(function(err){alert(err.message);});};return React.createElement(Form,{size:\"large\"},React.createElement(\"h3\",null,\"Add task\"),React.createElement(Form.Field,null,React.createElement(Input,{type:\"text\",value:task,onChange:handleOnChange,placeholder:\"New task\"}),taskError?React.createElement(Message,{negative:true},React.createElement(Message.Header,null,\"Incorrect input\"),React.createElement(\"p\",null,\"The task should be between 5 and 35 characters\")):null),React.createElement(Button,{size:\"small\",type:\"submit\",icon:true,color:\"green\",onClick:handleOnClick,disabled:!task},React.createElement(Icon,{name:\"add\"})));};export default AddTask;","map":{"version":3,"sources":["/home/szymon/Desktop/ToDo-App/todo-app/src/components/AddTask.js"],"names":["React","useState","Button","Form","Message","Icon","Input","BASE_URL","AddTask","props","task","setTask","dateOfCreateTask","setDateOfCreateTask","taskError","setTaskError","setFormError","handleOnChange","event","target","value","Date","now","handleOnClick","preventDefault","error","taskLength","length","formattedFormData","done","fetch","method","body","JSON","stringify","then","onAdd","catch","err","alert","message"],"mappings":"yHAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CAEA,OAASC,MAAT,CAAiBC,IAAjB,CAAuBC,OAAvB,CAAgCC,IAAhC,CAAsCC,KAAtC,KAAmD,mBAAnD,CAEA,OAASC,QAAT,KAAyB,QAAzB,CAEA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAAAC,KAAK,CAAI,eACCR,QAAQ,CAAC,EAAD,CADT,wCAChBS,IADgB,eACVC,OADU,8BAEyBV,QAAQ,CAAC,EAAD,CAFjC,yCAEhBW,gBAFgB,eAEEC,mBAFF,8BAGWZ,QAAQ,CAAC,KAAD,CAHnB,yCAGhBa,SAHgB,eAGLC,YAHK,8BAIEd,QAAQ,CAAC,KAAD,CAJV,yCAIde,YAJc,eAMvB,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAAAC,KAAK,CAAI,CAC9BP,OAAO,CAACO,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAP,CACAP,mBAAmB,CAACQ,IAAI,CAACC,GAAL,EAAD,CAAnB,CACD,CAHD,CAKA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAAL,KAAK,CAAI,CAC7BA,KAAK,CAACM,cAAN,GAEA,GAAIC,CAAAA,KAAK,CAAG,KAAZ,CAEA,GAAMC,CAAAA,UAAU,CAAGhB,IAAI,CAACiB,MAAxB,CAEA,GAAID,UAAU,CAAG,CAAb,EAAkBA,UAAU,CAAG,EAAnC,CAAuC,CACrCX,YAAY,CAAC,IAAD,CAAZ,CACAU,KAAK,CAAG,IAAR,CACD,CAHD,IAGO,CACLV,YAAY,CAAC,KAAD,CAAZ,CACD,CAED,GAAIU,KAAJ,CAAW,CACTT,YAAY,CAAC,IAAD,CAAZ,CACA,OACD,CACDA,YAAY,CAAC,KAAD,CAAZ,CAEA,GAAMY,CAAAA,iBAAiB,CAAG,CACxBlB,IAAI,CAAJA,IADwB,CAExBmB,IAAI,CAAE,KAFkB,CAGxBjB,gBAAgB,CAAhBA,gBAHwB,CAA1B,CAMAkB,KAAK,WAAIvB,QAAJ,eAA0B,CAC7BwB,MAAM,CAAE,MADqB,CAE7BC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAeN,iBAAf,CAFuB,CAA1B,CAAL,CAIGO,IAJH,CAIQ,UAAM,CACV1B,KAAK,CAAC2B,KAAN,GACAzB,OAAO,CAAC,EAAD,CAAP,CACAE,mBAAmB,CAAC,EAAD,CAAnB,CACD,CARH,EASGwB,KATH,CASS,SAAAC,GAAG,CAAI,CACZC,KAAK,CAACD,GAAG,CAACE,OAAL,CAAL,CACD,CAXH,EAYD,CAtCD,CAwCA,MACE,qBAAC,IAAD,EAAM,IAAI,CAAC,OAAX,EACE,yCADF,CAEE,oBAAC,IAAD,CAAM,KAAN,MACE,oBAAC,KAAD,EACE,IAAI,CAAC,MADP,CAEE,KAAK,CAAE9B,IAFT,CAGE,QAAQ,CAAEO,cAHZ,CAIE,WAAW,CAAC,UAJd,EADF,CAOGH,SAAS,CACR,oBAAC,OAAD,EAAS,QAAQ,KAAjB,EACE,oBAAC,OAAD,CAAS,MAAT,wBADF,CAEE,8EAFF,CADQ,CAKN,IAZN,CAFF,CAgBE,oBAAC,MAAD,EACE,IAAI,CAAC,OADP,CAEE,IAAI,CAAC,QAFP,CAGE,IAAI,KAHN,CAIE,KAAK,CAAC,OAJR,CAKE,OAAO,CAAES,aALX,CAME,QAAQ,CAAE,CAACb,IANb,EAQE,oBAAC,IAAD,EAAM,IAAI,CAAC,KAAX,EARF,CAhBF,CADF,CA6BD,CAhFD,CAkFA,cAAeF,CAAAA,OAAf","sourcesContent":["import React, { useState } from \"react\";\n\nimport { Button, Form, Message, Icon, Input } from \"semantic-ui-react\";\n\nimport { BASE_URL } from \"./ToDo\";\n\nconst AddTask = props => {\n  const [task, setTask] = useState(\"\");\n  const [dateOfCreateTask, setDateOfCreateTask] = useState(\"\");\n  const [taskError, setTaskError] = useState(false);\n  const [, setFormError] = useState(false);\n\n  const handleOnChange = event => {\n    setTask(event.target.value);\n    setDateOfCreateTask(Date.now());\n  };\n\n  const handleOnClick = event => {\n    event.preventDefault();\n\n    let error = false;\n\n    const taskLength = task.length;\n\n    if (taskLength < 5 || taskLength > 35) {\n      setTaskError(true);\n      error = true;\n    } else {\n      setTaskError(false);\n    }\n\n    if (error) {\n      setFormError(true);\n      return;\n    }\n    setFormError(false);\n\n    const formattedFormData = {\n      task,\n      done: false,\n      dateOfCreateTask\n    };\n\n    fetch(`${BASE_URL}/todo.json`, {\n      method: \"POST\",\n      body: JSON.stringify(formattedFormData)\n    })\n      .then(() => {\n        props.onAdd();\n        setTask(\"\");\n        setDateOfCreateTask(\"\");\n      })\n      .catch(err => {\n        alert(err.message);\n      });\n  };\n\n  return (\n    <Form size=\"large\">\n      <h3>Add task</h3>\n      <Form.Field>\n        <Input\n          type=\"text\"\n          value={task}\n          onChange={handleOnChange}\n          placeholder=\"New task\"\n        />\n        {taskError ? (\n          <Message negative>\n            <Message.Header>Incorrect input</Message.Header>\n            <p>The task should be between 5 and 35 characters</p>\n          </Message>\n        ) : null}\n      </Form.Field>\n      <Button\n        size=\"small\"\n        type=\"submit\"\n        icon\n        color=\"green\"\n        onClick={handleOnClick}\n        disabled={!task}\n      >\n        <Icon name=\"add\" />\n      </Button>\n    </Form>\n  );\n};\n\nexport default AddTask;\n"]},"metadata":{},"sourceType":"module"}