{"ast":null,"code":"var _jsxFileName = \"/home/szymon/Desktop/ToDo-App/todo-app/src/components/AddTask.js\";\nimport React, { useState } from \"react\";\nimport { Button, Form, Message, Icon, Input } from \"semantic-ui-react\";\nimport { BASE_URL } from \"./ToDo\";\n\nconst AddTask = props => {\n  const [task, setTask] = useState(\"\");\n  const [dateOfCreateTask, setDateOfCreateTask] = useState(\"\");\n  const [taskError, setTaskError] = useState(false);\n  const [, setFormError] = useState(false);\n\n  const handleOnChange = event => {\n    setTask(event.target.value);\n    setDateOfCreateTask(Date.now());\n  };\n\n  const handleOnClick = event => {\n    event.preventDefault();\n    let error = false;\n    const taskLength = task.length;\n\n    if (taskLength < 5 || taskLength > 35) {\n      setTaskError(true);\n      error = true;\n    } else {\n      setTaskError(false);\n    }\n\n    if (error) {\n      setFormError(true);\n      return;\n    }\n\n    setFormError(false);\n    const formattedFormData = {\n      task,\n      done: false,\n      dateOfCreateTask\n    };\n    fetch(`${BASE_URL}/todo.json`, {\n      method: \"POST\",\n      body: JSON.stringify(formattedFormData)\n    }).then(() => {\n      props.onAdd();\n      setTask(\"\");\n      setDateOfCreateTask(\"\");\n    }).catch(err => {\n      alert(err.message);\n    });\n  };\n\n  return React.createElement(Form, {\n    size: \"large\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"Add task\"), React.createElement(Form.Field, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(Input, {\n    type: \"text\",\n    value: task,\n    onChange: handleOnChange,\n    placeholder: \"New task\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }), taskError ? React.createElement(Message, {\n    negative: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(Message.Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"Incorrect input\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"The task should be between 5 and 35 characters\")) : null), React.createElement(Button, {\n    size: \"small\",\n    type: \"submit\",\n    icon: true,\n    color: \"green\",\n    onClick: handleOnClick,\n    disabled: !task,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    name: \"add\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  })));\n};\n\nexport default AddTask;","map":{"version":3,"sources":["/home/szymon/Desktop/ToDo-App/todo-app/src/components/AddTask.js"],"names":["React","useState","Button","Form","Message","Icon","Input","BASE_URL","AddTask","props","task","setTask","dateOfCreateTask","setDateOfCreateTask","taskError","setTaskError","setFormError","handleOnChange","event","target","value","Date","now","handleOnClick","preventDefault","error","taskLength","length","formattedFormData","done","fetch","method","body","JSON","stringify","then","onAdd","catch","err","alert","message"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,OAAvB,EAAgCC,IAAhC,EAAsCC,KAAtC,QAAmD,mBAAnD;AAEA,SAASC,QAAT,QAAyB,QAAzB;;AAEA,MAAMC,OAAO,GAAGC,KAAK,IAAI;AACvB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACW,gBAAD,EAAmBC,mBAAnB,IAA0CZ,QAAQ,CAAC,EAAD,CAAxD;AACA,QAAM,CAACa,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,GAAGe,YAAH,IAAmBf,QAAQ,CAAC,KAAD,CAAjC;;AAEA,QAAMgB,cAAc,GAAGC,KAAK,IAAI;AAC9BP,IAAAA,OAAO,CAACO,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAP;AACAP,IAAAA,mBAAmB,CAACQ,IAAI,CAACC,GAAL,EAAD,CAAnB;AACD,GAHD;;AAKA,QAAMC,aAAa,GAAGL,KAAK,IAAI;AAC7BA,IAAAA,KAAK,CAACM,cAAN;AAEA,QAAIC,KAAK,GAAG,KAAZ;AAEA,UAAMC,UAAU,GAAGhB,IAAI,CAACiB,MAAxB;;AAEA,QAAID,UAAU,GAAG,CAAb,IAAkBA,UAAU,GAAG,EAAnC,EAAuC;AACrCX,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACAU,MAAAA,KAAK,GAAG,IAAR;AACD,KAHD,MAGO;AACLV,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;;AAED,QAAIU,KAAJ,EAAW;AACTT,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACA;AACD;;AACDA,IAAAA,YAAY,CAAC,KAAD,CAAZ;AAEA,UAAMY,iBAAiB,GAAG;AACxBlB,MAAAA,IADwB;AAExBmB,MAAAA,IAAI,EAAE,KAFkB;AAGxBjB,MAAAA;AAHwB,KAA1B;AAMAkB,IAAAA,KAAK,CAAE,GAAEvB,QAAS,YAAb,EAA0B;AAC7BwB,MAAAA,MAAM,EAAE,MADqB;AAE7BC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,iBAAf;AAFuB,KAA1B,CAAL,CAIGO,IAJH,CAIQ,MAAM;AACV1B,MAAAA,KAAK,CAAC2B,KAAN;AACAzB,MAAAA,OAAO,CAAC,EAAD,CAAP;AACAE,MAAAA,mBAAmB,CAAC,EAAD,CAAnB;AACD,KARH,EASGwB,KATH,CASSC,GAAG,IAAI;AACZC,MAAAA,KAAK,CAACD,GAAG,CAACE,OAAL,CAAL;AACD,KAXH;AAYD,GAtCD;;AAwCA,SACE,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAC,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,KAAK,EAAE9B,IAFT;AAGE,IAAA,QAAQ,EAAEO,cAHZ;AAIE,IAAA,WAAW,EAAC,UAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAOGH,SAAS,GACR,oBAAC,OAAD;AAAS,IAAA,QAAQ,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,OAAD,CAAS,MAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sDAFF,CADQ,GAKN,IAZN,CAFF,EAgBE,oBAAC,MAAD;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,IAAI,EAAC,QAFP;AAGE,IAAA,IAAI,MAHN;AAIE,IAAA,KAAK,EAAC,OAJR;AAKE,IAAA,OAAO,EAAES,aALX;AAME,IAAA,QAAQ,EAAE,CAACb,IANb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQE,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAC,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,CAhBF,CADF;AA6BD,CAhFD;;AAkFA,eAAeF,OAAf","sourcesContent":["import React, { useState } from \"react\";\n\nimport { Button, Form, Message, Icon, Input } from \"semantic-ui-react\";\n\nimport { BASE_URL } from \"./ToDo\";\n\nconst AddTask = props => {\n  const [task, setTask] = useState(\"\");\n  const [dateOfCreateTask, setDateOfCreateTask] = useState(\"\");\n  const [taskError, setTaskError] = useState(false);\n  const [, setFormError] = useState(false);\n\n  const handleOnChange = event => {\n    setTask(event.target.value);\n    setDateOfCreateTask(Date.now());\n  };\n\n  const handleOnClick = event => {\n    event.preventDefault();\n\n    let error = false;\n\n    const taskLength = task.length;\n\n    if (taskLength < 5 || taskLength > 35) {\n      setTaskError(true);\n      error = true;\n    } else {\n      setTaskError(false);\n    }\n\n    if (error) {\n      setFormError(true);\n      return;\n    }\n    setFormError(false);\n\n    const formattedFormData = {\n      task,\n      done: false,\n      dateOfCreateTask\n    };\n\n    fetch(`${BASE_URL}/todo.json`, {\n      method: \"POST\",\n      body: JSON.stringify(formattedFormData)\n    })\n      .then(() => {\n        props.onAdd();\n        setTask(\"\");\n        setDateOfCreateTask(\"\");\n      })\n      .catch(err => {\n        alert(err.message);\n      });\n  };\n\n  return (\n    <Form size=\"large\">\n      <h3>Add task</h3>\n      <Form.Field>\n        <Input\n          type=\"text\"\n          value={task}\n          onChange={handleOnChange}\n          placeholder=\"New task\"\n        />\n        {taskError ? (\n          <Message negative>\n            <Message.Header>Incorrect input</Message.Header>\n            <p>The task should be between 5 and 35 characters</p>\n          </Message>\n        ) : null}\n      </Form.Field>\n      <Button\n        size=\"small\"\n        type=\"submit\"\n        icon\n        color=\"green\"\n        onClick={handleOnClick}\n        disabled={!task}\n      >\n        <Icon name=\"add\" />\n      </Button>\n    </Form>\n  );\n};\n\nexport default AddTask;\n"]},"metadata":{},"sourceType":"module"}