{"ast":null,"code":"import _objectSpread from \"/home/szymon/Desktop/ToDo-App/todo-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/szymon/Desktop/ToDo-App/todo-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/szymon/Desktop/ToDo-App/todo-app/src/components/ToDoEditItem.js\";\nimport React, { useState } from \"react\";\nimport { Button, Form, Icon, List, Message, Input } from \"semantic-ui-react\";\nimport { BASE_URL } from \"./ToDo\";\nimport Checkbox from \"./Checkbox\";\n\nconst ToDoEditList = props => {\n  const item = props.item;\n\n  const _useState = useState(item.task),\n        _useState2 = _slicedToArray(_useState, 2),\n        editTask = _useState2[0],\n        setEditTask = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        taskError = _useState4[0],\n        setTaskError = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        formError = _useState6[0],\n        setFormError = _useState6[1];\n\n  const handleOnChange = event => {\n    setEditTask(event.target.value);\n  };\n\n  const handleOnSaveClick = event => {\n    event.preventDefault();\n    let error = false;\n    const taskLength = editTask.length;\n\n    if (taskLength < 5 || taskLength > 35) {\n      setTaskError(true);\n      error = true;\n    } else {\n      setTaskError(false);\n    }\n\n    if (error) {\n      setFormError(true);\n      return;\n    }\n\n    setFormError(false);\n\n    const formattedFormData = _objectSpread({}, this.state, {\n      taskError: null,\n      formError: null\n    });\n\n    fetch(`${BASE_URL}/todo/${item.id}.json`, {\n      method: \"PUT\",\n      body: JSON.stringify(editTask)\n    }).then(() => {\n      props.onSave(); // setEditTask(item.task);\n    });\n  };\n\n  const handleOnCloseClick = () => {\n    props.onClose();\n  };\n\n  return React.createElement(\"div\", {\n    key: item.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(List.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(Form.Field, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(Input, {\n    fluid: true,\n    size: \"small\",\n    type: \"text\",\n    value: editTask,\n    name: \"task\",\n    onChange: handleOnChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }), taskError ? React.createElement(Message, {\n    negative: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(Message.Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"Incorrect input\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, \"The task should be between 5 and 35 characters\")) : null)), React.createElement(Button, {\n    size: \"small\",\n    attached: \"left\",\n    positive: true,\n    icon: true,\n    onClick: handleOnSaveClick,\n    disabled: !item.task,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    name: \"save\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  })), React.createElement(Button, {\n    size: \"small\",\n    attached: \"right\",\n    icon: true,\n    onClick: handleOnCloseClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    name: \"close\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  })), React.createElement(Checkbox, {\n    done: item.done,\n    id: item.id,\n    item: item.task,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }), React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }));\n};\n\nexport default ToDoEditList; // export default class ToDoEditList extends React.Component {\n//   state = {\n//     ...this.props.item,\n//     id: null,\n//     taskError: false,\n//     formError: false\n//   };\n//   handleOnChange = event => {\n//     this.setState({\n//       [event.target.name]: event.target.value\n//     });\n//   };\n//   handleOnSaveClick = event => {\n//     event.preventDefault();\n//     let error = false;\n//     const taskLength = this.state.task.length;\n//     if (taskLength < 5 || taskLength > 35) {\n//       this.setState({ taskError: true });\n//       error = true;\n//     } else {\n//       this.setState({ taskError: false });\n//     }\n//     if (error) {\n//       this.setState({ formError: true });\n//       return;\n//     }\n//     this.setState({ formError: false });\n//     const formattedFormData = {\n//       ...this.state,\n//       taskError: null,\n//       formError: null\n//     };\n//     fetch(`${BASE_URL}/todo/${this.props.item.id}.json`, {\n//       method: \"PUT\",\n//       body: JSON.stringify(formattedFormData)\n//     }).then(() => {\n//       this.props.onSave();\n//     });\n//   };\n//   handleOnCloseClick = () => {\n//     this.props.onClose();\n//   };\n//   render() {\n//     const { item } = this.props;\n//     const { task, taskError } = this.state;\n//     return (\n//       <div key={item.id}>\n//         <List.Item>\n//           <Form.Field>\n//             <Input\n//               fluid\n//               size='small'\n//               type=\"text\"\n//               value={task}\n//               name=\"task\"\n//               onChange={this.handleOnChange}\n//             />\n//             {taskError ? (\n//               <Message negative>\n//                 <Message.Header>Incorrect input</Message.Header>\n//                 <p>The task should be between 5 and 35 characters</p>\n//               </Message>\n//             ) : null}\n//           </Form.Field>\n//         </List.Item>\n//         <Button\n//           size=\"small\"\n//           attached=\"left\"\n//           positive\n//           icon\n//           onClick={this.handleOnSaveClick}\n//           disabled={!task}\n//         >\n//           <Icon name=\"save\" />\n//         </Button>\n//         <Button\n//           size=\"small\"\n//           attached=\"right\"\n//           icon\n//           onClick={this.handleOnCloseClick}\n//         >\n//           <Icon name=\"close\" />\n//         </Button>\n//         <Checkbox done={item.done} id={item.id} item={item.task} />\n//         <hr />\n//       </div>\n//     );\n//   }\n// }","map":{"version":3,"sources":["/home/szymon/Desktop/ToDo-App/todo-app/src/components/ToDoEditItem.js"],"names":["React","useState","Button","Form","Icon","List","Message","Input","BASE_URL","Checkbox","ToDoEditList","props","item","task","editTask","setEditTask","taskError","setTaskError","formError","setFormError","handleOnChange","event","target","value","handleOnSaveClick","preventDefault","error","taskLength","length","formattedFormData","state","fetch","id","method","body","JSON","stringify","then","onSave","handleOnCloseClick","onClose","done"],"mappings":"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A,OAAO,EAAE0B,kBAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAC,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CA7BF,EAgCE,oBAAC,QAAD;AAAU,IAAA,IAAI,EAAE3B,IAAI,CAAC6B,IAArB;AAA2B,IAAA,EAAE,EAAE7B,IAAI,CAACoB,EAApC;AAAwC,IAAA,IAAI,EAAEpB,IAAI,CAACC,IAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhCF,EAiCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAjCF,CADF;AAqCD,CAvFD;;AAyFA,eAAeH,YAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useState } from \"react\";\n\nimport { Button, Form, Icon, List, Message, Input } from \"semantic-ui-react\";\n\nimport { BASE_URL } from \"./ToDo\";\nimport Checkbox from \"./Checkbox\";\n\nconst ToDoEditList = props => {\n  const { item } = props;\n\n  const [editTask, setEditTask] = useState(item.task);\n  const [taskError, setTaskError] = useState(false);\n  const [formError, setFormError] = useState(false);\n\n  const handleOnChange = event => {\n    setEditTask(event.target.value);\n  };\n\n  const handleOnSaveClick = event => {\n    event.preventDefault();\n\n    let error = false;\n\n    const taskLength = editTask.length;\n\n    if (taskLength < 5 || taskLength > 35) {\n      setTaskError(true);\n      error = true;\n    } else {\n      setTaskError(false);\n    }\n\n    if (error) {\n      setFormError(true);\n      return;\n    }\n    setFormError(false);\n\n    const formattedFormData = {\n      ...this.state,\n      taskError: null,\n      formError: null\n    };\n\n    fetch(`${BASE_URL}/todo/${item.id}.json`, {\n      method: \"PUT\",\n      body: JSON.stringify(editTask)\n    }).then(() => {\n      props.onSave();\n      // setEditTask(item.task);\n    });\n  };\n\n  const handleOnCloseClick = () => {\n    props.onClose();\n  };\n\n  return (\n    <div key={item.id}>\n      <List.Item>\n        <Form.Field>\n          <Input\n            fluid\n            size=\"small\"\n            type=\"text\"\n            value={editTask}\n            name=\"task\"\n            onChange={handleOnChange}\n          />\n          {taskError ? (\n            <Message negative>\n              <Message.Header>Incorrect input</Message.Header>\n              <p>The task should be between 5 and 35 characters</p>\n            </Message>\n          ) : null}\n        </Form.Field>\n      </List.Item>\n      <Button\n        size=\"small\"\n        attached=\"left\"\n        positive\n        icon\n        onClick={handleOnSaveClick}\n        disabled={!item.task}\n      >\n        <Icon name=\"save\" />\n      </Button>\n      <Button size=\"small\" attached=\"right\" icon onClick={handleOnCloseClick}>\n        <Icon name=\"close\" />\n      </Button>\n      <Checkbox done={item.done} id={item.id} item={item.task} />\n      <hr />\n    </div>\n  );\n};\n\nexport default ToDoEditList;\n\n// export default class ToDoEditList extends React.Component {\n//   state = {\n//     ...this.props.item,\n//     id: null,\n//     taskError: false,\n//     formError: false\n//   };\n\n//   handleOnChange = event => {\n//     this.setState({\n//       [event.target.name]: event.target.value\n//     });\n//   };\n\n//   handleOnSaveClick = event => {\n//     event.preventDefault();\n\n//     let error = false;\n\n//     const taskLength = this.state.task.length;\n\n//     if (taskLength < 5 || taskLength > 35) {\n//       this.setState({ taskError: true });\n//       error = true;\n//     } else {\n//       this.setState({ taskError: false });\n//     }\n\n//     if (error) {\n//       this.setState({ formError: true });\n//       return;\n//     }\n\n//     this.setState({ formError: false });\n\n//     const formattedFormData = {\n//       ...this.state,\n//       taskError: null,\n//       formError: null\n//     };\n\n//     fetch(`${BASE_URL}/todo/${this.props.item.id}.json`, {\n//       method: \"PUT\",\n//       body: JSON.stringify(formattedFormData)\n//     }).then(() => {\n//       this.props.onSave();\n//     });\n//   };\n\n//   handleOnCloseClick = () => {\n//     this.props.onClose();\n//   };\n\n//   render() {\n//     const { item } = this.props;\n//     const { task, taskError } = this.state;\n\n//     return (\n//       <div key={item.id}>\n//         <List.Item>\n//           <Form.Field>\n//             <Input\n//               fluid\n//               size='small'\n//               type=\"text\"\n//               value={task}\n//               name=\"task\"\n//               onChange={this.handleOnChange}\n//             />\n//             {taskError ? (\n//               <Message negative>\n//                 <Message.Header>Incorrect input</Message.Header>\n//                 <p>The task should be between 5 and 35 characters</p>\n//               </Message>\n//             ) : null}\n//           </Form.Field>\n//         </List.Item>\n//         <Button\n//           size=\"small\"\n//           attached=\"left\"\n//           positive\n//           icon\n//           onClick={this.handleOnSaveClick}\n//           disabled={!task}\n//         >\n//           <Icon name=\"save\" />\n//         </Button>\n//         <Button\n//           size=\"small\"\n//           attached=\"right\"\n//           icon\n//           onClick={this.handleOnCloseClick}\n//         >\n//           <Icon name=\"close\" />\n//         </Button>\n//         <Checkbox done={item.done} id={item.id} item={item.task} />\n//         <hr />\n//       </div>\n//     );\n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}