{"ast":null,"code":"import _slicedToArray from \"/home/szymon/Desktop/ToDo-App/todo-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/szymon/Desktop/ToDo-App/todo-app/src/components/AddTask.js\";\nimport React, { useState } from \"react\";\nimport { Button, Form, Message, Icon, Input } from \"semantic-ui-react\";\nimport { BASE_URL } from \"./ToDo\";\n\nconst AddTask = props => {\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        task = _useState2[0],\n        setTask = _useState2[1];\n\n  const _useState3 = useState(\"\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        dateOfCreateTask = _useState4[0],\n        setDateOfCreateTask = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        taskError = _useState6[0],\n        setTaskError = _useState6[1];\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        formError = _useState8[0],\n        setFormError = _useState8[1];\n\n  const handleOnChange = event => {\n    setTask(event.target.value);\n    setDateOfCreateTask(Date.now());\n  };\n\n  const handleOnClick = event => {\n    event.preventDefault();\n    let error = false;\n    const taskLength = task.length;\n\n    if (taskLength < 5 || taskLength > 35) {\n      setTaskError(true);\n      error = true;\n    } else {\n      setTaskError(false);\n    }\n\n    if (error) {\n      setFormError(true);\n      return;\n    }\n\n    setFormError(false);\n    const formattedFormData = {\n      task,\n      done: false,\n      dateOfCreateTask\n    };\n    fetch(`${BASE_URL}/todo.json`, {\n      method: \"POST\",\n      body: JSON.stringify(formattedFormData)\n    }).then(() => {\n      props.onAdd();\n      setTask(\"\");\n      setDateOfCreateTask(\"\");\n    }).catch(err => {\n      alert(err.message);\n    });\n  };\n\n  return React.createElement(Form, {\n    size: \"large\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"Add task\"), React.createElement(Form.Field, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(Input, {\n    type: \"text\",\n    value: task,\n    onChange: handleOnChange,\n    placeholder: \"New task\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }), taskError ? React.createElement(Message, {\n    negative: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(Message.Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"Incorrect input\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"The task should be between 5 and 35 characters\")) : null), React.createElement(Button, {\n    size: \"small\",\n    type: \"submit\",\n    icon: true,\n    color: \"green\",\n    onClick: handleOnClick,\n    disabled: !task,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    name: \"add\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  })));\n};\n\nexport default AddTask;","map":{"version":3,"sources":["/home/szymon/Desktop/ToDo-App/todo-app/src/components/AddTask.js"],"names":["React","useState","Button","Form","Message","Icon","Input","BASE_URL","AddTask","props","task","setTask","dateOfCreateTask","setDateOfCreateTask","taskError","setTaskError","formError","setFormError","handleOnChange","event","target","value","Date","now","handleOnClick","preventDefault","error","taskLength","length","formattedFormData","done","fetch","method","body","JSON","stringify","then","onAdd","catch","err","alert","message"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\nimport { Button, Form, Message, Icon, Input } from \"semantic-ui-react\";\n\nimport { BASE_URL } from \"./ToDo\";\n\nconst AddTask = (props) => {\n  const [task, setTask] = useState(\"\");\n  const [dateOfCreateTask, setDateOfCreateTask] = useState(\"\");\n  const [taskError, setTaskError] = useState(false);\n  const [formError, setFormError] = useState(false);\n\n  const handleOnChange = event => {\n    setTask(event.target.value);\n    setDateOfCreateTask(Date.now());\n  };\n\n  const handleOnClick = event => {\n    event.preventDefault();\n\n    let error = false;\n\n    const taskLength = task.length;\n\n    if (taskLength < 5 || taskLength > 35) {\n      setTaskError(true);\n      error = true;\n    } else {\n      setTaskError(false);\n    }\n\n    if (error) {\n      setFormError(true);\n      return;\n    }\n    setFormError(false);\n\n    const formattedFormData = {\n      task,\n      done: false,\n      dateOfCreateTask\n    };\n\n    fetch(`${BASE_URL}/todo.json`, {\n      method: \"POST\",\n      body: JSON.stringify(formattedFormData)\n    })\n      .then(() => {\n        props.onAdd();\n        setTask(\"\");\n        setDateOfCreateTask(\"\");\n      })\n      .catch(err => {\n        alert(err.message);\n      });\n  };\n\n  return (\n    <Form size=\"large\">\n      <h3>Add task</h3>\n      <Form.Field>\n        <Input\n          type=\"text\"\n          value={task}\n          onChange={handleOnChange}\n          placeholder=\"New task\"\n        />\n        {taskError ? (\n          <Message negative>\n            <Message.Header>Incorrect input</Message.Header>\n            <p>The task should be between 5 and 35 characters</p>\n          </Message>\n        ) : null}\n      </Form.Field>\n      <Button\n        size=\"small\"\n        type=\"submit\"\n        icon\n        color=\"green\"\n        onClick={handleOnClick}\n        disabled={!task}\n      >\n        <Icon name=\"add\" />\n      </Button>\n    </Form>\n  );\n};\n\nexport default AddTask;\n"]},"metadata":{},"sourceType":"module"}