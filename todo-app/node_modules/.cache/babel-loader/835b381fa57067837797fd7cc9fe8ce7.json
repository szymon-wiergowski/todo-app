{"ast":null,"code":"var _jsxFileName = \"/home/szymon/Desktop/ToDo-App/todo-app/src/components/Counter.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Container, Header, Button } from \"semantic-ui-react\";\nimport \"../App.css\";\nimport { increment, decrement, reset } from \"../state/counter\";\n\nconst Counter = ({\n  increment,\n  decrement,\n  reset,\n  counter\n}) => React.createElement(\"div\", {\n  className: \"counter\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 10\n  },\n  __self: this\n}, React.createElement(Container, {\n  text: true,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11\n  },\n  __self: this\n}, React.createElement(Header, {\n  as: \"h2\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12\n  },\n  __self: this\n}, \"Welcome to Counter\"), React.createElement(\"h4\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13\n  },\n  __self: this\n}, \"Current count:\", counter)), React.createElement(Button.Group, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15\n  },\n  __self: this\n}, React.createElement(Button, {\n  onClick: decrement,\n  color: \"red\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 16\n  },\n  __self: this\n}, \"DECREMENT\"), React.createElement(Button, {\n  onClick: reset,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 19\n  },\n  __self: this\n}, \"RESET\"), React.createElement(Button, {\n  onClick: increment,\n  color: \"green\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 20\n  },\n  __self: this\n}, \"INCREMENT\"))); // Pobieramy pożądany kawałek stanu\n\n\nconst mapStateToProps = state => ({\n  counter: state.counter\n}); // Dajemy możliwość wysyłania(dispatchowania) akcji z komponentu\n\n\nconst mapDispatchToProps = {\n  increment,\n  decrement,\n  reset\n}; // Dzięki export default nie musimy wymyślać nowej nazwy dla Countera, który jest podłączony do store'a\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter);","map":{"version":3,"sources":["/home/szymon/Desktop/ToDo-App/todo-app/src/components/Counter.js"],"names":["React","connect","Container","Header","Button","increment","decrement","reset","Counter","counter","mapStateToProps","state","mapDispatchToProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,MAA5B,QAA0C,mBAA1C;AAEA,OAAO,YAAP;AACA,SAASC,SAAT,EAAoBC,SAApB,EAA+BC,KAA/B,QAA4C,kBAA5C;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAAEH,EAAAA,SAAF;AAAaC,EAAAA,SAAb;AAAwBC,EAAAA,KAAxB;AAA+BE,EAAAA;AAA/B,CAAD,KACd;AAAK,EAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,oBAAC,SAAD;AAAW,EAAA,IAAI,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,oBAAC,MAAD;AAAQ,EAAA,EAAE,EAAC,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAmBA,OAAnB,CAFF,CADF,EAKE,oBAAC,MAAD,CAAQ,KAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,oBAAC,MAAD;AAAQ,EAAA,OAAO,EAAEH,SAAjB;AAA4B,EAAA,KAAK,EAAC,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,EAIE,oBAAC,MAAD;AAAQ,EAAA,OAAO,EAAEC,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAJF,EAKE,oBAAC,MAAD;AAAQ,EAAA,OAAO,EAAEF,SAAjB;AAA4B,EAAA,KAAK,EAAC,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eALF,CALF,CADF,C,CAkBA;;;AACA,MAAMK,eAAe,GAAGC,KAAK,KAAK;AAChCF,EAAAA,OAAO,EAAEE,KAAK,CAACF;AADiB,CAAL,CAA7B,C,CAIA;;;AACA,MAAMG,kBAAkB,GAAG;AACzBP,EAAAA,SADyB;AAEzBC,EAAAA,SAFyB;AAGzBC,EAAAA;AAHyB,CAA3B,C,CAMA;;AACA,eAAeN,OAAO,CAACS,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CJ,OAA7C,CAAf","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { Container, Header, Button } from \"semantic-ui-react\";\n\nimport \"../App.css\";\nimport { increment, decrement, reset } from \"../state/counter\";\n\nconst Counter = ({ increment, decrement, reset, counter }) => (\n  <div className=\"counter\">\n    <Container text>\n      <Header as=\"h2\">Welcome to Counter</Header>\n      <h4>Current count:{counter}</h4>\n    </Container>\n    <Button.Group>\n      <Button onClick={decrement} color=\"red\">\n        DECREMENT\n      </Button>\n      <Button onClick={reset}>RESET</Button>\n      <Button onClick={increment} color=\"green\">\n        INCREMENT\n      </Button>\n    </Button.Group>\n  </div>\n);\n\n// Pobieramy pożądany kawałek stanu\nconst mapStateToProps = state => ({\n  counter: state.counter\n});\n\n// Dajemy możliwość wysyłania(dispatchowania) akcji z komponentu\nconst mapDispatchToProps = {\n  increment,\n  decrement,\n  reset\n};\n\n// Dzięki export default nie musimy wymyślać nowej nazwy dla Countera, który jest podłączony do store'a\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter);\n"]},"metadata":{},"sourceType":"module"}